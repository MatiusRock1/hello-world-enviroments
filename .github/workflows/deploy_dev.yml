name: deploy dev

on:
  repository_dispatch:
    types: [deploy_dev]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Determine image to deploy (tag only)
        id: img
        run: |
          if [ -n "${{ github.event.client_payload.image }}" ]; then
            echo "Using tag image from payload"
            echo "image=${{ github.event.client_payload.image }}" >> $GITHUB_OUTPUT
          else
            echo "No image in payload; fetching latest release"
            latest_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            tag_name=$(echo "$latest_release" | jq -r '.tag_name')
            version=${tag_name#v}
            image="ghcr.io/${{ github.repository }}:${version}"
            echo "image=$image" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Railway via GraphQL
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_ENV_ID: ${{ secrets.RAILWAY_ENV_ID }}
          REGISTRY_USERNAME: ${{ secrets.GHCR_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.GHCR_PASSWORD }}
          IMAGE: ${{ steps.img.outputs.image }}
        run: |
          echo "Deploying image $IMAGE to Railway service $RAILWAY_SERVICE_ID"
          url="https://backboard.railway.com/graphql/v2"
          [ -n "$RAILWAY_PROJECT_ID" ] || { echo "Missing RAILWAY_PROJECT_ID secret"; exit 1; }
          [ -n "$RAILWAY_ENV_ID" ] || { echo "Missing RAILWAY_ENV_ID secret"; exit 1; }
          # Step 1: Update service source image (optionally include registry credentials if provided)
          update_variables=$(jq -n --arg eid "$RAILWAY_ENV_ID" --arg sid "$RAILWAY_SERVICE_ID" --arg img "$IMAGE" --arg u "$REGISTRY_USERNAME" --arg p "$REGISTRY_PASSWORD" '
            { environmentId: $eid, serviceId: $sid, input: { source: { image: $img } } } | 
            if ($u != null and $u != "" and $p != null and $p != "") then .input.registryCredentials = { username: $u, password: $p } | . else . end
          ')
          update_payload=$(jq -n --argjson vars "$update_variables" '{
            query: "mutation($environmentId: String, $serviceId: String!, $input: ServiceInstanceUpdateInput!) { serviceInstanceUpdate(environmentId: $environmentId, serviceId: $serviceId, input: $input) { id } }",
            variables: $vars
          }')
          echo "Updating service source image..."
          upd_code=$(curl -sS -o update.json -w "%{http_code}" -X POST "$url" \
            -H "Project-Access-Token: $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$update_payload")
          echo "Update HTTP $upd_code" && cat update.json || true
          [ "$upd_code" -ge 200 ] && [ "$upd_code" -lt 300 ] || { echo "serviceInstanceUpdate failed (HTTP $upd_code)"; exit 1; }

          # Step 2: Trigger deploy
          deploy_payload=$(jq -n --arg eid "$RAILWAY_ENV_ID" --arg sid "$RAILWAY_SERVICE_ID" '{
            query: "mutation($environmentId: String!, $serviceId: String!) { serviceInstanceDeploy(environmentId: $environmentId, serviceId: $serviceId) { id } }",
            variables: { environmentId: $eid, serviceId: $sid }
          }')
          echo "Triggering deploy..."
          dep_code=$(curl -sS -o deploy.json -w "%{http_code}" -X POST "$url" \
            -H "Project-Access-Token: $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$deploy_payload")
          echo "Deploy HTTP $dep_code" && cat deploy.json || true
          if ! jq -e '.data.serviceInstanceDeploy.id' deploy.json >/dev/null 2>&1; then
            echo "Deploy failed or not available, trying Redeploy..."
            redeploy_payload=$(jq -n --arg eid "$RAILWAY_ENV_ID" --arg sid "$RAILWAY_SERVICE_ID" '{
              query: "mutation($environmentId: String!, $serviceId: String!) { serviceInstanceRedeploy(environmentId: $environmentId, serviceId: $serviceId) { id } }",
              variables: { environmentId: $eid, serviceId: $sid }
            }')
            red_code=$(curl -sS -o redeploy.json -w "%{http_code}" -X POST "$url" \
              -H "Project-Access-Token: $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$redeploy_payload")
            echo "Redeploy HTTP $red_code" && cat redeploy.json || true
            [ "$red_code" -ge 200 ] && [ "$red_code" -lt 300 ] || { echo "serviceInstanceRedeploy failed (HTTP $red_code)"; exit 1; }
          fi
