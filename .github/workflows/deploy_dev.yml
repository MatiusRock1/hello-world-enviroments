name: deploy dev

on:
  repository_dispatch:
    types: [deploy_dev]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Determine image to deploy (tag only)
        id: img
        run: |
          if [ -n "${{ github.event.client_payload.image }}" ]; then
            echo "Using tag image from payload"
            echo "image=${{ github.event.client_payload.image }}" >> $GITHUB_OUTPUT
          else
            echo "No image in payload; fetching latest release"
            latest_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            tag_name=$(echo "$latest_release" | jq -r '.tag_name')
            version=${tag_name#v}
            image="ghcr.io/${{ github.repository }}:${version}"
            echo "image=$image" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Railway via GraphQL
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
          RAILWAY_ENV_ID: ${{ secrets.RAILWAY_ENV_ID }}
          IMAGE: ${{ steps.img.outputs.image }}
        run: |
          echo "Deploying image $IMAGE to Railway service $RAILWAY_SERVICE_ID"
          url="https://backboard.railway.com/graphql/v2"
          [ -n "$RAILWAY_PROJECT_ID" ] || { echo "Missing RAILWAY_PROJECT_ID secret"; exit 1; }
          [ -n "$RAILWAY_ENV_ID" ] || { echo "Missing RAILWAY_ENV_ID secret"; exit 1; }
          payload=$(jq -n --arg pid "$RAILWAY_PROJECT_ID" --arg eid "$RAILWAY_ENV_ID" --arg sid "$RAILWAY_SERVICE_ID" --arg img "$IMAGE" '{
            query: "mutation($projectId: ID!, $environmentId: ID!, $serviceId: ID!, $image: String!) { deploymentCreate(input: { projectId: $projectId, environmentId: $environmentId, serviceId: $serviceId, source: { image: $image } }) { id status } }",
            variables: { projectId: $pid, environmentId: $eid, serviceId: $sid, image: $img }
          }')
          http_code=$(curl -sS -o response.json -w "%{http_code}" -X POST "$url" \
            -H "Project-Access-Token: $RAILWAY_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$payload")
          echo "HTTP $http_code"
          cat response.json || true
          [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ] || { echo "Railway API returned HTTP $http_code"; exit 1; }
          jq -e '.data.deploymentCreate.id' response.json >/dev/null || { echo "Railway deployment failed"; exit 1; }
