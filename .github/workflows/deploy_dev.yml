name: deploy dev

on:
  repository_dispatch:
    types: [deploy_dev]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Determine image to deploy (tag only)
        id: img
        run: |
          if [ -n "${{ github.event.client_payload.image }}" ]; then
            echo "Using tag image from payload"
            echo "image=${{ github.event.client_payload.image }}" >> $GITHUB_OUTPUT
          else
            echo "No image in payload; fetching latest release"
            latest_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            tag_name=$(echo "$latest_release" | jq -r '.tag_name')
            version=${tag_name#v}
            image="ghcr.io/${{ github.repository }}:${version}"
            echo "image=$image" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Railway via GraphQL
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
          IMAGE: ${{ steps.img.outputs.image }}
        run: |
          echo "Deploying image $IMAGE to Railway service $RAILWAY_SERVICE_ID"
            payload=$(jq -n --arg sid "$RAILWAY_SERVICE_ID" --arg img "$IMAGE" '{
              query: "mutation($serviceId: ID!, $image: String!) { serviceDeploymentCreate(input: { serviceId: $serviceId, source: { image: $image } }) { id status } }",
              variables: { serviceId: $sid, image: $img }
            }')
            url="https://backboard.railway.com/graphql/v2"
            echo "POST $url"
            success=0
            # Try with Authorization header (account or team token)
            http_code=$(curl -sS -o response.json -w "%{http_code}" -X POST "$url" \
              -H "Authorization: Bearer $RAILWAY_TOKEN" \
              -H "Content-Type: application/json" \
              --data "$payload")
            echo "HTTP $http_code"
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ] && jq -e '.data.serviceDeploymentCreate.id' response.json >/dev/null 2>&1; then
              success=1
            else
              echo "Auth with Authorization header failed or response invalid; trying Project-Access-Token header"
              cat response.json || true
              http_code=$(curl -sS -o response.json -w "%{http_code}" -X POST "$url" \
                -H "Project-Access-Token: $RAILWAY_TOKEN" \
                -H "Content-Type: application/json" \
                --data "$payload")
              echo "HTTP $http_code"
              if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ] && jq -e '.data.serviceDeploymentCreate.id' response.json >/dev/null 2>&1; then
                success=1
              fi
              if [ "$success" -ne 1 ]; then
                echo "Trying Team-Access-Token header"
                http_code=$(curl -sS -o response.json -w "%{http_code}" -X POST "$url" \
                  -H "Team-Access-Token: $RAILWAY_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "$payload")
                echo "HTTP $http_code"
                if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ] && jq -e '.data.serviceDeploymentCreate.id' response.json >/dev/null 2>&1; then
                  success=1
                fi
              fi
            fi
            [ "$success" -eq 1 ] || { echo "Railway deployment failed"; cat response.json || true; exit 1; }
