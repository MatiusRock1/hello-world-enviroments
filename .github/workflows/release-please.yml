name: deploy to dev

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    environment: ci
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GH_TOKEN }}
          release-type: node

  build-and-push:
    needs: release
    if: ${{ needs.release.outputs.release_created == 'true' }}
    runs-on: ubuntu-latest
    environment: ci
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Get latest release version
      id: get_version
      run: |
        latest_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest")
        tag_name=$(echo "$latest_release" | jq -r '.tag_name')
        version=${tag_name#v}
        echo "tag=$tag_name" >> $GITHUB_OUTPUT
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "Latest release tag: $tag_name"
        echo "Version: $version"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=raw,value=${{ steps.get_version.outputs.version }}
          type=raw,value=latest
        labels: |
          org.opencontainers.image.version=${{ steps.get_version.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.title=hello-world-environments
          org.opencontainers.image.description=Hello World Environments Application
          version=${{ steps.get_version.outputs.version }}
          release.tag=${{ steps.get_version.outputs.tag }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.get_version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update release with Docker image info
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const tag = '${{ steps.get_version.outputs.tag }}';
          const version = '${{ steps.get_version.outputs.version }}';
          
          // Get the current release
          const release = await github.rest.repos.getReleaseByTag({
            owner,
            repo,
            tag
          });
          
          // Prepare Docker image information
          const dockerInfo = `
          
          ## üê≥ Docker Images
          
          This release is available as Docker images:
          
          ### Pull commands:
          \`\`\`bash
          # Specific version
          docker pull ghcr.io/${owner}/${repo}:${version}
          
          # Latest
          docker pull ghcr.io/${owner}/${repo}:latest
          \`\`\`
          
          ### Image details:
          - **Registry**: GitHub Container Registry (ghcr.io)
          - **Repository**: \`ghcr.io/${owner}/${repo}\`
          - **Tags**: \`${version}\`, \`latest\`
          - **Platform**: linux/amd64
          - **Base Image**: node:18-alpine
          
          ### Run the container:
          \`\`\`bash
          docker run -p 8080:8080 ghcr.io/${owner}/${repo}:${version}
          \`\`\`
          
          ### Environment Variables:
          - \`APP_VERSION\`: ${version}
          - \`NODE_ENV\`: production
          
          üì¶ [View on GitHub Container Registry](https://github.com/${owner}/${repo}/pkgs/container/${repo})
          `;
          
          // Update the release body
          await github.rest.repos.updateRelease({
            owner,
            repo,
            release_id: release.data.id,
            body: release.data.body + dockerInfo
          });